// Code generated by go-swagger; DO NOT EDIT.

package entity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// EntityHandlerHandlerFunc turns a function with the right signature into a entity handler handler
type EntityHandlerHandlerFunc func(EntityHandlerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EntityHandlerHandlerFunc) Handle(params EntityHandlerParams) middleware.Responder {
	return fn(params)
}

// EntityHandlerHandler interface for that can handle valid entity handler params
type EntityHandlerHandler interface {
	Handle(EntityHandlerParams) middleware.Responder
}

// NewEntityHandler creates a new http.Handler for the entity handler operation
func NewEntityHandler(ctx *middleware.Context, handler EntityHandlerHandler) *EntityHandler {
	return &EntityHandler{Context: ctx, Handler: handler}
}

/* EntityHandler swagger:route GET /entity/{entityName} entity entityHandler

Returns a single Entity by given Name

Finds full entity by it's Name field

*/
type EntityHandler struct {
	Context *middleware.Context
	Handler EntityHandlerHandler
}

func (o *EntityHandler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewEntityHandlerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
