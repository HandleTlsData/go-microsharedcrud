/*
 * Microshared-CRUD
 *
 * CRUD operation over Entities.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter(service string) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	switch service {
	case "alpha":
		log.Printf("alpha microservice routing")
		for _, route := range routesAlpha {
			var handler http.Handler
			handler = route.HandlerFunc
			handler = Logger(handler, route.Name)

			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
		break
	case "beta":
		log.Printf("beta microservice routing")
		for _, route := range routesBeta {
			var handler http.Handler
			handler = route.HandlerFunc
			handler = Logger(handler, route.Name)

			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
		break
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routesBeta = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"EntityHandler",
		strings.ToUpper("Get"),
		"/entity/{entityName}",
		EntityHandlerBeta,
	},

	Route{
		"EntityStore",
		strings.ToUpper("Post"),
		"/entity",
		EntityStoreBeta,
	},
}

var routesAlpha = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"EntityHandler",
		strings.ToUpper("Get"),
		"/entity/{entityName}",
		EntityHandlerAlpha,
	},

	Route{
		"EntityStore",
		strings.ToUpper("Post"),
		"/entity",
		EntityStoreAlpha,
	},
}
