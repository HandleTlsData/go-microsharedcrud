// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CRUDIntercommunicationClient is the client API for CRUDIntercommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRUDIntercommunicationClient interface {
	GetBetaInformation(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	GetAlphaInformation(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	UpdateBetaInformation(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	UpdateAlphaInformation(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
}

type cRUDIntercommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewCRUDIntercommunicationClient(cc grpc.ClientConnInterface) CRUDIntercommunicationClient {
	return &cRUDIntercommunicationClient{cc}
}

func (c *cRUDIntercommunicationClient) GetBetaInformation(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/main.CRUDIntercommunication/GetBetaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDIntercommunicationClient) GetAlphaInformation(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/main.CRUDIntercommunication/GetAlphaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDIntercommunicationClient) UpdateBetaInformation(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/main.CRUDIntercommunication/UpdateBetaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDIntercommunicationClient) UpdateAlphaInformation(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/main.CRUDIntercommunication/UpdateAlphaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRUDIntercommunicationServer is the server API for CRUDIntercommunication service.
// All implementations must embed UnimplementedCRUDIntercommunicationServer
// for forward compatibility
type CRUDIntercommunicationServer interface {
	GetBetaInformation(context.Context, *GetRequest) (*GetReply, error)
	GetAlphaInformation(context.Context, *GetRequest) (*GetReply, error)
	UpdateBetaInformation(context.Context, *UpdateRequest) (*UpdateReply, error)
	UpdateAlphaInformation(context.Context, *UpdateRequest) (*UpdateReply, error)
	mustEmbedUnimplementedCRUDIntercommunicationServer()
}

// UnimplementedCRUDIntercommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedCRUDIntercommunicationServer struct {
}

func (UnimplementedCRUDIntercommunicationServer) GetBetaInformation(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetaInformation not implemented")
}
func (UnimplementedCRUDIntercommunicationServer) GetAlphaInformation(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlphaInformation not implemented")
}
func (UnimplementedCRUDIntercommunicationServer) UpdateBetaInformation(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBetaInformation not implemented")
}
func (UnimplementedCRUDIntercommunicationServer) UpdateAlphaInformation(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlphaInformation not implemented")
}
func (UnimplementedCRUDIntercommunicationServer) mustEmbedUnimplementedCRUDIntercommunicationServer() {
}

// UnsafeCRUDIntercommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRUDIntercommunicationServer will
// result in compilation errors.
type UnsafeCRUDIntercommunicationServer interface {
	mustEmbedUnimplementedCRUDIntercommunicationServer()
}

func RegisterCRUDIntercommunicationServer(s grpc.ServiceRegistrar, srv CRUDIntercommunicationServer) {
	s.RegisterService(&CRUDIntercommunication_ServiceDesc, srv)
}

func _CRUDIntercommunication_GetBetaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDIntercommunicationServer).GetBetaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CRUDIntercommunication/GetBetaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDIntercommunicationServer).GetBetaInformation(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDIntercommunication_GetAlphaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDIntercommunicationServer).GetAlphaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CRUDIntercommunication/GetAlphaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDIntercommunicationServer).GetAlphaInformation(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDIntercommunication_UpdateBetaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDIntercommunicationServer).UpdateBetaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CRUDIntercommunication/UpdateBetaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDIntercommunicationServer).UpdateBetaInformation(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUDIntercommunication_UpdateAlphaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDIntercommunicationServer).UpdateAlphaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CRUDIntercommunication/UpdateAlphaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDIntercommunicationServer).UpdateAlphaInformation(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CRUDIntercommunication_ServiceDesc is the grpc.ServiceDesc for CRUDIntercommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRUDIntercommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CRUDIntercommunication",
	HandlerType: (*CRUDIntercommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBetaInformation",
			Handler:    _CRUDIntercommunication_GetBetaInformation_Handler,
		},
		{
			MethodName: "GetAlphaInformation",
			Handler:    _CRUDIntercommunication_GetAlphaInformation_Handler,
		},
		{
			MethodName: "UpdateBetaInformation",
			Handler:    _CRUDIntercommunication_UpdateBetaInformation_Handler,
		},
		{
			MethodName: "UpdateAlphaInformation",
			Handler:    _CRUDIntercommunication_UpdateAlphaInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared-crud-grpc.proto",
}
