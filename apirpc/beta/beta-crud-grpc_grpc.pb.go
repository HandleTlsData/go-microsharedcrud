// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package betarpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BetaCRUDRPCClient is the client API for BetaCRUDRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BetaCRUDRPCClient interface {
	GetBetaInformation(ctx context.Context, in *BetaGetRequest, opts ...grpc.CallOption) (*BetaGetReply, error)
	UpdateBetaInformation(ctx context.Context, in *BetaUpdateRequest, opts ...grpc.CallOption) (*BetaUpdateReply, error)
	DeleteBetaInformation(ctx context.Context, in *BetaGetRequest, opts ...grpc.CallOption) (*BetaUpdateReply, error)
}

type betaCRUDRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBetaCRUDRPCClient(cc grpc.ClientConnInterface) BetaCRUDRPCClient {
	return &betaCRUDRPCClient{cc}
}

func (c *betaCRUDRPCClient) GetBetaInformation(ctx context.Context, in *BetaGetRequest, opts ...grpc.CallOption) (*BetaGetReply, error) {
	out := new(BetaGetReply)
	err := c.cc.Invoke(ctx, "/main.BetaCRUDRPC/GetBetaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betaCRUDRPCClient) UpdateBetaInformation(ctx context.Context, in *BetaUpdateRequest, opts ...grpc.CallOption) (*BetaUpdateReply, error) {
	out := new(BetaUpdateReply)
	err := c.cc.Invoke(ctx, "/main.BetaCRUDRPC/UpdateBetaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betaCRUDRPCClient) DeleteBetaInformation(ctx context.Context, in *BetaGetRequest, opts ...grpc.CallOption) (*BetaUpdateReply, error) {
	out := new(BetaUpdateReply)
	err := c.cc.Invoke(ctx, "/main.BetaCRUDRPC/DeleteBetaInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetaCRUDRPCServer is the server API for BetaCRUDRPC service.
// All implementations must embed UnimplementedBetaCRUDRPCServer
// for forward compatibility
type BetaCRUDRPCServer interface {
	GetBetaInformation(context.Context, *BetaGetRequest) (*BetaGetReply, error)
	UpdateBetaInformation(context.Context, *BetaUpdateRequest) (*BetaUpdateReply, error)
	DeleteBetaInformation(context.Context, *BetaGetRequest) (*BetaUpdateReply, error)
	mustEmbedUnimplementedBetaCRUDRPCServer()
}

// UnimplementedBetaCRUDRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBetaCRUDRPCServer struct {
}

func (UnimplementedBetaCRUDRPCServer) GetBetaInformation(context.Context, *BetaGetRequest) (*BetaGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetaInformation not implemented")
}
func (UnimplementedBetaCRUDRPCServer) UpdateBetaInformation(context.Context, *BetaUpdateRequest) (*BetaUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBetaInformation not implemented")
}
func (UnimplementedBetaCRUDRPCServer) DeleteBetaInformation(context.Context, *BetaGetRequest) (*BetaUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBetaInformation not implemented")
}
func (UnimplementedBetaCRUDRPCServer) mustEmbedUnimplementedBetaCRUDRPCServer() {}

// UnsafeBetaCRUDRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BetaCRUDRPCServer will
// result in compilation errors.
type UnsafeBetaCRUDRPCServer interface {
	mustEmbedUnimplementedBetaCRUDRPCServer()
}

func RegisterBetaCRUDRPCServer(s grpc.ServiceRegistrar, srv BetaCRUDRPCServer) {
	s.RegisterService(&BetaCRUDRPC_ServiceDesc, srv)
}

func _BetaCRUDRPC_GetBetaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetaCRUDRPCServer).GetBetaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BetaCRUDRPC/GetBetaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetaCRUDRPCServer).GetBetaInformation(ctx, req.(*BetaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetaCRUDRPC_UpdateBetaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetaUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetaCRUDRPCServer).UpdateBetaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BetaCRUDRPC/UpdateBetaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetaCRUDRPCServer).UpdateBetaInformation(ctx, req.(*BetaUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetaCRUDRPC_DeleteBetaInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetaCRUDRPCServer).DeleteBetaInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BetaCRUDRPC/DeleteBetaInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetaCRUDRPCServer).DeleteBetaInformation(ctx, req.(*BetaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BetaCRUDRPC_ServiceDesc is the grpc.ServiceDesc for BetaCRUDRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BetaCRUDRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.BetaCRUDRPC",
	HandlerType: (*BetaCRUDRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBetaInformation",
			Handler:    _BetaCRUDRPC_GetBetaInformation_Handler,
		},
		{
			MethodName: "UpdateBetaInformation",
			Handler:    _BetaCRUDRPC_UpdateBetaInformation_Handler,
		},
		{
			MethodName: "DeleteBetaInformation",
			Handler:    _BetaCRUDRPC_DeleteBetaInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apirpc/beta-crud-grpc.proto",
}
